version: '3.8'

services:
  spring-app:
    image: hadoroke/channeling-be:latest
    container_name: spring-app
    ports:
      - "8080:8080"
    user: "1000:1000"
    environment:
      # MySQL

      SPRING_DATASOURCE_URL: "jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}?serverTimezone=Asia/Seoul"
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}

      # S3
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}

      # Google OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}

      # Others
      JWT_SECRET: ${JWT_SECRET}
      REDIS_HOST: ${REDIS_HOST}
      SPRING_PROFILES_ACTIVE: "db,s3,oauth,jwt,prod"
      FASTAPI_URL: "http://fastapi-app:8000"
      FRONT_URL: "https://channeling.it.com"
    volumes:
      - ./logs:/app/logs
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  fastapi-app:
    image: hadoroke/channeling-llm:latest
    container_name: fastapi-app
    ports:
      - "8000:8000"
    environment:
      # Timezone
      TZ: Asia/Seoul
      # MySQL
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

      # PostgreSQL
      PG_HOST: ${PG_HOST}
      PG_PORT: ${PG_PORT}
      PG_DATABASE: ${PG_DATABASE}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}

      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SERPAPI_KEY: ${SERPAPI_KEY}
      YOUTUBE_API_KEY: ${YOUTUBE_API_KEY}

      # Webshare Proxy
      PROXY_USERNAME: ${PROXY_USERNAME}
      PROXY_PASSWORD: ${PROXY_PASSWORD}

      KAFKA_BOOTSTRAP_SERVERS: broker:29092
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - broker

  overview-consumer:
    image: hadoroke/channeling-llm:latest
    container_name: overview-consumer
    command: python kafka_overview_consumer.py
    environment:
      # Timezone
      TZ: Asia/Seoul
      # MySQL
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

      # PostgreSQL
      PG_HOST: ${PG_HOST}
      PG_PORT: ${PG_PORT}
      PG_DATABASE: ${PG_DATABASE}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}

      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SERPAPI_KEY: ${SERPAPI_KEY}
      YOUTUBE_API_KEY: ${YOUTUBE_API_KEY}

      # Webshare Proxy
      PROXY_USERNAME: ${PROXY_USERNAME}
      PROXY_PASSWORD: ${PROXY_PASSWORD}

      # Kafka 관련
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - broker
  
  analysis-consumer:
    image: hadoroke/channeling-llm:latest
    container_name: analysis-consumer
    command: python kafka_analysis_consumer.py
    environment:
      # Timezone
      TZ: Asia/Seoul
      # MySQL
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

      # PostgreSQL
      PG_HOST: ${PG_HOST}
      PG_PORT: ${PG_PORT}
      PG_DATABASE: ${PG_DATABASE}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}

      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SERPAPI_KEY: ${SERPAPI_KEY}
      YOUTUBE_API_KEY: ${YOUTUBE_API_KEY}

      # Webshare Proxy
      PROXY_USERNAME: ${PROXY_USERNAME}
      PROXY_PASSWORD: ${PROXY_PASSWORD}

      # Kafka 관련
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - broker
  
  idea-consumer:
    image: hadoroke/channeling-llm:latest
    container_name: idea-consumer
    command: python kafka_idea_consumer.py
    environment:
      # Timezone
      TZ: Asia/Seoul
      # MySQL
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

      # PostgreSQL
      PG_HOST: ${PG_HOST}
      PG_PORT: ${PG_PORT}
      PG_DATABASE: ${PG_DATABASE}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}

      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SERPAPI_KEY: ${SERPAPI_KEY}
      YOUTUBE_API_KEY: ${YOUTUBE_API_KEY}

      # Webshare Proxy
      PROXY_USERNAME: ${PROXY_USERNAME}
      PROXY_PASSWORD: ${PROXY_PASSWORD}

      # Kafka 관련
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - broker

  broker:
    image: confluentinc/confluent-local:7.9.0
    container_name: broker
    environment:
      # 클라이언트가 연결할 주소 정보. 컨테이너 간: broker:29092, 외부: localhost:9092
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      # KRaft 모드 컨트롤러 설정. broker:29093이 컨트롤러 역할(메타 데이터 관리함)
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      # 실제 바인딩할 리스너들. 29092(내부), 29093(컨트롤러), 9092(외부)
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
    ports:
      - "9092:9092"
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8989:8080"
    restart: always
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:29092
    volumes:
      - ./kafka:/var/lib/kafka/data
    depends_on:
      - broker
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge
